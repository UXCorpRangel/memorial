---
import Button from "@components/Button.astro";
import { countdownData } from "./data.js";
---

<section class="flex flex-col items-center justify-center gap-6 py-12 lg:py-48">
  <img src="tyto_and_sandy.png" alt="tyto_and_sandy" class="w-auto h-[180px]" />
  <!-- <div class="flex flex-row flex-wrap gap-4 justify-center items-center">
    {
      [
        { slug: "days", label: "Dias" },
        { slug: "hours", label: "Horas" },
        { slug: "min", label: "Min" },
        { slug: "seg", label: "Seg" },
      ].map((e) => {
        return (
          <section class="flex flex-col gap-4 items-center justify-center">
            <figure class="w-[60px] h-[60px] md:w-[80px] md:h-[80px] lg:h-[122px] lg:w-[110px] border-[0.81px] border-[#383848] bg-[radial-gradient(circle_at_10%_25%,rgba(67,39,51,0.5)_0%,rgba(34,32,46,0.5)_100%)] flex items-center justify-center">
              <p
                id={`countdown_${e.slug}`}
                class="text-[24px] md:text-[32px] lg:text-[64px] font-[500] text-white"
              />
            </figure>
            <span class="text-[16px] text-white font-[400]">{e.label}</span>
          </section>
        );
      })
    }
  </div> -->
  <p
    class="text-[20px] md:text-[26px] lg:text-[32px] text-white font-bold text-center max-w-3xl"
  >
    {countdownData.title}
  </p>
  <p
    class="text-[14px] lg:text-[1rem] text-center font-[400] text-white leading-relaxed whitespace-pre-line"
  >
    {countdownData.description}
  </p>
  <!--  <div class="flex items-center gap-6 flex-wrap flex-col lg:flex-row">
    <p class="text-white font-[400]">Próximo</p>
    <div
      class="py-1 px-4 border-[0.81px] border-[#383848] bg-[radial-gradient(circle_at_10%_25%,rgba(67,39,51,0.5)_0%,rgba(34,32,46,0.5)_100%)] flex items-center justify-center"
    >
      <p id="next_date" class="text-white"></p>
    </div>
    <div
      class="py-1 px-4 border-[0.81px] border-[#383848] bg-[radial-gradient(circle_at_10%_25%,rgba(67,39,51,0.5)_0%,rgba(34,32,46,0.5)_100%)] flex items-center justify-center"
    >
      <p id="next_hour" class="text-white"></p>
    </div>
  </div> -->
  <iframe
    src="https://player.twitch.tv/?video=2571350233&parent=tytomemorial.com"
    frameborder="0"
    allowfullscreen="true"
    scrolling="no"
    height="720"
    width="1280"></iframe>
  <div class="flex flex-col lg:flex-row gap-4">
    <Button id="button_hero_agenda_countdown" variant="secondary">
      Ver agenda</Button
    >
    <Button
      id="button_hero_twitch_countdown"
      variant="twitch"
      style="display: none;"
      ><svg
        fill="#ffffff"
        width="24"
        height="24"
        viewBox="0 0 32 32"
        version="1.1"
        xmlns="http://www.w3.org/2000/svg"
        data-astro-cid-kijex5pd=""
      >
        <path
          d="M26.711 14.929l-4.284 4.284h-4.285l-3.749 3.749v-3.749h-4.82v-16.067h17.138zM8.502 1.004l-5.356 5.356v19.279h6.427v5.356l5.356-5.356h4.284l9.641-9.64v-14.996zM21.356 6.895h2.142v6.427h-2.142zM15.464 6.895h2.143v6.427h-2.144z"
          data-astro-cid-kijex5pd=""></path>
      </svg>
      Ver transmisión</Button
    >
  </div>
</section>

<script>
  import { countdownData } from "./data";

  const target = new Date(countdownData.target_date);

  const elements = {
    days: document.getElementById("countdown_days"),
    hours: document.getElementById("countdown_hours"),
    minutes: document.getElementById("countdown_min"),
    seconds: document.getElementById("countdown_seg"),
    nextDate: document.getElementById("next_date"),
    nextHour: document.getElementById("next_hour"),
    twitchButton: document.getElementById("button_hero_twitch_countdown"),
  };

  function formatNumber(n: number) {
    return String(n).padStart(2, "0");
  }

  function formatDate(date: Date) {
    const day = formatNumber(date.getDate());
    const month = date.toLocaleString("es-ES", { month: "short" });
    const year = date.getFullYear();
    return `${day} ${month} ${year}`;
  }

  function formatTime(date: Date) {
    const hours = formatNumber(date.getHours());
    const minutes = formatNumber(date.getMinutes());
    return `A las ${hours}:${minutes}`;
  }

  function updateCountdown() {
    const now = new Date().getTime();
    const distance = target.getTime() - now;

    if (
      !elements.days ||
      !elements.hours ||
      !elements.minutes ||
      !elements.seconds
    )
      return;

    if (distance <= 0) {
      elements.days.textContent = "00";
      elements.hours.textContent = "00";
      elements.minutes.textContent = "00";
      elements.seconds.textContent = "00";

      // Mostrar el botón de Twitch cuando el contador llegue a cero
      if (elements.twitchButton) {
        elements.twitchButton.style.display = "block";
      }

      clearInterval(intervalId);
      return;
    }

    const days = Math.floor(distance / (1000 * 60 * 60 * 24));
    const hours = Math.floor(
      (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)
    );
    const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((distance % (1000 * 60)) / 1000);

    elements.days.textContent = formatNumber(days);
    elements.hours.textContent = formatNumber(hours);
    elements.minutes.textContent = formatNumber(minutes);
    elements.seconds.textContent = formatNumber(seconds);

    // Actualizar fecha/hora también si se necesita
    if (elements.nextDate) elements.nextDate.textContent = formatDate(target);
    if (elements.nextHour) elements.nextHour.textContent = formatTime(target);
  }

  const intervalId = setInterval(updateCountdown, 1000);
  updateCountdown();

  const button_countdown_agenda = document.querySelector(
    "#button_hero_agenda_countdown"
  );
  button_countdown_agenda?.addEventListener?.("click", () => {
    window.location.href = "/agenda";
  });

  const button_countdown_twitch = document.querySelector(
    "#button_hero_twitch_countdown"
  );
  button_countdown_twitch?.addEventListener?.("click", () => {
    window.location.href = "https://www.twitch.tv/uxanarangel";
  });
</script>
