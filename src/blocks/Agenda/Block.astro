---
import Button from "@/components/Button.astro";
import LinkIcon from "@/components/LinkIcon.astro";
import Header from "../Header";
import { speakers } from "./data";

const timezones = [
  { country: "Chile", timezone: "America/Santiago", flag: "üá®üá±" },
  { country: "Argentina", timezone: "America/Buenos_Aires", flag: "üá¶üá∑" },
  { country: "Brasil", timezone: "America/Sao_Paulo", flag: "üáßüá∑" },
  { country: "M√©xico", timezone: "America/Mexico_City", flag: "üá≤üáΩ" },
  { country: "Colombia", timezone: "America/Bogota", flag: "üá®üá¥" },
  { country: "Espa√±a", timezone: "Europe/Madrid", flag: "üá™üá∏" },
  { country: "Estados Unidos (NY)", timezone: "America/New_York", flag: "üá∫üá∏" },
  {
    country: "Estados Unidos (LA)",
    timezone: "America/Los_Angeles",
    flag: "üá∫üá∏",
  },
];

function getTimeZoneOffsetMinutes(timeZone: string, date: Date): number {
  const parts = new Intl.DateTimeFormat("en-CA", {
    timeZone,
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit",
    second: "2-digit",
    hour12: false,
  }).formatToParts(date);

  const map = Object.fromEntries(parts.map((p) => [p.type, p.value]));
  const asIfUTC = Date.UTC(
    Number(map.year),
    Number(map.month) - 1,
    Number(map.day),
    Number(map.hour),
    Number(map.minute),
    Number(map.second)
  );

  return (asIfUTC - date.getTime()) / 60000;
}
function chileWallTimeToAbsoluteDate(hhmm: string): Date {
  const [h, m = "0"] = hhmm.split(":");
  const now = new Date();

  const ymdParts = new Intl.DateTimeFormat("en-CA", {
    timeZone: "America/Santiago",
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
  }).formatToParts(now);

  const ymd = Object.fromEntries(ymdParts.map((p) => [p.type, p.value]));
  const isoWall = `${ymd.year}-${ymd.month}-${ymd.day}T${String(h).padStart(2, "0")}:${String(m).padStart(2, "0")}:00`;

  const asUTC = new Date(isoWall + "Z");
  const offsetMin = getTimeZoneOffsetMinutes("America/Santiago", asUTC);
  return new Date(asUTC.getTime() - offsetMin * 60000);
}

function convertChileTimeToWorldTimes(chileTimeString: string) {
  const base = chileWallTimeToAbsoluteDate(chileTimeString);
  return timezones.map(({ country, timezone, flag }) => {
    const formatter = new Intl.DateTimeFormat([], {
      hour: "2-digit",
      minute: "2-digit",
      timeZone: timezone,
      hour12: false,
    });
    return { country, time: formatter.format(base), flag };
  });
}
---

<Header />
<div>
  <h1
    class="text-8xl max-sm:text-[46px] font-medium text-center text-white mb-14 max-sm:mb-4 mt-24 sm:mt-32"
  >
    Agenda
  </h1>
  <div class="justify-self-center">
    <p class="text-white text-center max-sm:mb-12 mb-8 lg:text-lg">
      Qui√©nes nos van a apoyar en esta causa ‚ù§Ô∏è
    </p>
    <div class="flex gap-6 sm:gap-10 flex-col sm:flex-row w-full items-center">
      <Button variant="primary"> Donar al Paypal </Button>
      <Button id="back-to-home" variant="secondary">Volver al home</Button>
    </div>
  </div>
</div>

<div
  id="agenda-timeline"
  class="container flex flex-col mt-44 mb-64 relative mx-auto gap-72"
>
  {
    speakers.map((speaker) => (
      <div
        class="speaker grid grid-cols-[1fr,auto,1fr] gap-x-10 items-start text-white"
        data-active="true"
      >
        <div class="max-sm:order-2 col-1 sm:text-right">
          <h2 class="text-2xl lg:text-4xl line-clamp-1 ml-auto">
            {speaker.name}
          </h2>
          <p class="text-lg sm:text-[32px] text-neutral-400 mt-2">
            {speaker.session}
          </p>
          <div class="flex sm:justify-end flex-wrap mt-4 gap-y-4 mb-8">
            {speaker.socialMedia.map((platform) => (
              <LinkIcon
                href={platform.link}
                icon={platform.icon}
                title={platform.label}
                class="text-white px-2 flex [&_svg]:size-6"
              />
            ))}
          </div>
          <div class="flex sm:justify-end flex-wrap mt-4 gap-y-4 mb-8">
            {speaker.extraSocialMedia?.map((platform) => (
              <LinkIcon
                href={platform.link}
                icon={platform.icon}
                title={platform.label}
                class="text-white px-2 flex [&_svg]:size-6"
              />
            ))}
          </div>
        </div>

        <div
          class="line-path col-2 max-sm:order-1 rounded-full p-2 border-2 size-8"
          data-visible="false"
        />

        <div class="text-lg sm:text-[32px] max-sm:order-3 max-sm:col-start-2 text-left flex flex-wrap gap-3 items-start">
          {convertChileTimeToWorldTimes(speaker.time).map(({ time, flag }) => (
            <div class="flex items-start gap-2">
              <span class="font-noto_color_emoji mr-2">{flag}</span>
              <span>{time}</span>
            </div>
          ))}
        </div>
      </div>
    ))
  }

  <div
    id="line-observer"
    class="absolute top-0 w-2 -z-10 h-0 left-4 sm:inset-x-0 sm:mx-auto rounded-full"
  >
  </div>
</div>

<style>
  .line-path {
    background: linear-gradient(90deg, #f3384a 0%, #972123 100%);
    border-color: #21212d;
    opacity: 1;
    scale: 1;
    transition: all 0.5s ease-in-out;
    transform-origin: center;
    position: relative;
    z-index: 1;
  }

  .line-path[data-visible="false"] {
    opacity: 0;
    scale: 0;
  }
  .speaker {
    transition: opacity 0.3s ease-in-out;
  }
  .speaker:nth-child(1) {
    opacity: 1 !important;
  }
  .speaker[data-active="true"] {
    opacity: 0.5;
  }

  #line-observer {
    background: linear-gradient(0deg, #f3384a 0%, #972123 100%);
    transition: height 0.3s linear;
    z-index: -1;
  }
  #line-observer::before {
    content: "";
    position: absolute;
    bottom: -4px;
    left: 50%;
    width: 44px;
    height: 44px;
    background: linear-gradient(90deg, #f3384a 0%, #972123 100%);
    border: 4px solid #ffffff;
    transform: translateX(-50%) translateY(50%);
    border-radius: 50%;
    transition: all 0.5s ease-in-out;
    opacity: 1;
    scale: 1;
    transform-origin: 0% 100%;
    z-index: 2;

    @starting-style {
      opacity: 0;
      scale: 0;
    }
  }
</style>

<script>
  import { scroll } from "motion";

  const backToHomeButton = document.getElementById("back-to-home");
  if (backToHomeButton) {
    backToHomeButton.addEventListener("click", () => {
      window.location.href = "/";
    });
  }

  document.addEventListener("DOMContentLoaded", () => {
    const timeline = document.getElementById("agenda-timeline");
    const lineObserver = document.getElementById("line-observer");
    const linePaths = document.querySelectorAll(".line-path");
    if (!timeline || !lineObserver || linePaths.length === 0) return;

    const isAtAbsoluteBottom = () => {
      const { scrollTop, scrollHeight, clientHeight } =
        document.documentElement;
      return scrollTop + clientHeight >= scrollHeight - 2;
    };

    scroll(
      (progress: number) => {
        const totalPoints = linePaths.length;
        const segmentSize = 1 / totalPoints;
        let targetHeight = 0;

        linePaths.forEach((el, index) => {
          const threshold = (index + 1) * segmentSize;
          el.setAttribute(
            "data-visible",
            progress >= threshold - segmentSize * 0.2 ? "true" : "false"
          );
          el.parentElement?.setAttribute(
            "data-active",
            progress >= threshold - segmentSize * 0.6 ? "false" : "true"
          );
        });

        for (let i = 0; i < totalPoints; i++) {
          const start = i * segmentSize;
          const end = (i + 1) * segmentSize;
          if (progress >= start && progress <= end) {
            const p = (progress - start) / segmentSize;
            const h = 100 / totalPoints;
            targetHeight = i * h + p * h;
            break;
          }
        }

        if (progress >= 0.995 || isAtAbsoluteBottom()) {
          targetHeight = 100;
          linePaths.forEach((el) => el.setAttribute("data-visible", "true"));
        }

        lineObserver.style.height = `${Math.min(targetHeight, 100)}%`;
      },
      {
        target: timeline,
        offset: ["start center", "end center"],
      }
    );
  });
</script>
