---
import SigninButton from "@/components/SigninButton.astro";
import Button from "@/components/Button.astro";
---

<div
  class="absolute inset-0 -z-10 bg-[radial-gradient(ellipse_50%_60%_at_50%_0%,#491012_0%,#07091E_100%)]"
>
</div>
<header class="flex justify-between items-center lg:relative py-12">
  <a
    href="/"
    class="lg:absolute lg:inset-0 w-full top-6 flex justify-center items-center text-white cursor-pointer gap-2 group tyto-logo-hover-svg lg:scale-150"
  >
    <span
      class="font-bebas font-[600] text-[1.5rem] transition group-hover:text-hover-primary"
    >
      Jaime
    </span>
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 2820 3540"
      class="fill-white"
      height="42"
    >
      <path
        fill="currentFill"
        d="M1177 103c-152 150-228 278-277 465-19 75-14 257 10 334l21 68 37-23c20-13 55-30 77-39l40-16 1-138c1-114 6-152 24-209 28-89 57-145 111-218 44-59 67-72 64-36-2 30 21 146 41 204 48 143 118 227 243 289 39 20 71 37 71 39 0 1-55 3-123 3-104 1-134 5-201 28-100 34-237 112-386 221-63 46-141 96-172 112-32 15-58 31-58 34 0 6 50 22 122 38 26 6 104 11 173 11l127 0-70 36c-145 74-242 218-267 396-4 27-4 64 0 85l7 36 36-40c49-52 133-108 207-135 47-17 88-23 193-26 150-5 193 8 96 28-123 25-284 133-354 236-77 115-105 208-97 326 7 113 28 173 92 262 30 42 50 76 45 76-10 0-67-31-125-69-188-122-314-357-315-588 0-149 39-275 126-396l34-47-38 0c-59 0-171-45-255-101-21-14 60-136 155-233l97-100 0-70c0-80 13-157 36-212 18-43 18-44 4-44-23 0-232 152-289 210-3 3-25 18-49 35l-44 30 44 13c24 7 63 12 87 10 23-2 42-1 42 2 0 3-22 20-48 37-26 18-76 54-112 79-36 25-98 62-139 81-73 34-74 36-50 48 13 8 57 17 97 20 39 4 72 9 72 11 0 2-14 19-31 37-18 17-50 57-73 87-22 30-44 56-48 58-5 2-8 8-8 12 0 5-13 31-28 57-75 129-120 282-128 443-4 63-4 112 0 108 4-3 15-20 24-37 59-108 166-212 280-271 72-38 133-62 140-56 2 3-14 23-37 46-57 59-125 166-158 250-75 187-68 427 17 615 33 76 108 190 149 229 37 35 37 34 9-52-18-53-22-90-22-172 0-59 6-118 13-134l12-30 33 75c48 109 100 184 190 275 92 92 123 116 295 238l124 87-7-33c-11-56-72-173-143-275-37-54-70-100-73-103-3-3-11-16-19-30-51-88-63-112-58-117 3-3 23 9 44 26 21 17 97 72 168 123 72 50 148 109 170 130 22 21 43 38 46 38 4 0 33 33 66 72 141 173 195 307 226 556 3 21 82-88 121-170 49-99 65-199 48-299-24-142-101-256-255-382-212-173-268-237-313-364-70-200 15-430 195-526 25-14 56-28 69-32 21-6 20-3-13 43-64 90-85 157-85 274 1 65 6 114 15 133 7 16 14 23 14 14 1-21 59-73 96-87 138-50 285-28 512 79 215 101 272 119 375 119 48 0 76-6 114-25 48-24 102-70 93-79-2-2-30 1-63 7-43 8-83 8-151-1-107-13-165-33-322-108-159-76-224-102-294-118-76-18-81-23-34-32 102-19 248 10 392 76 283 132 513 127 660-13l33-31-48-24c-76-38-108-77-126-155l-6-27 90 0c90 0 180-15 180-30 0-4-15-14-32-21-104-42-461-261-526-323-57-53-82-127-82-241 0-74-3-86-31-131-34-52-132-172-242-294-106-117-121-148-122-250 0-68 4-91 19-115 24-36 57-75 65-75 3 0 6 42 6 93 0 88 26 207 45 207 24 0 27-264 5-412-9-56-17-104-20-106-11-12-53 18-130 94-138 135-181 255-136 373 11 30 18 57 16 60-9 8-56-42-94-99-39-59-60-101-137-275-26-61-60-130-74-155-15-25-29-53-33-63-12-32-36-18-130 76zm599 1148c84 31 136 70 197 147 30 37 61 73 70 81 21 17 12 34-11 22-9-5-64-19-122-31-111-23-167-45-238-93-64-43-160-83-217-91-95-14-120-18-123-21-5-5 100-34 138-39 84-10 248 3 306 25zM1610 2589c0 6 22 43 48 83 87 131 138 265 154 402 5 50 11 92 13 94 9 9 58-120 72-190 14-70 15-91 4-157-7-42-26-104-41-137l-28-62-43 5c-41 5-68-3-161-42-11-4-18-3-18 4z"
      ></path>
    </svg>
    <span
      class="font-bebas font-[600] text-[1.5rem] transition group-hover:text-hover-primary"
      >Gutiérrez
    </span>
  </a>
  <div class="lg:absolute right-0 top-6" id="signin-button">
    <button class="text-white" id="signin-trigger">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <>
          <circle cx="12" cy="12" r="10"></circle>
          <circle cx="12" cy="10" r="3"></circle>
          <path d="M7 20.662V19a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v1.662"></path>
        </>
      </svg>
    </button>
    <SigninButton />
  </div>

  <dialog
    class="bg-background-default/80 text-white backdrop-blur p-8 rounded-lg max-w-md w-full"
    id="modal-overlay"
  >
    <header class="flex justify-between items-center mb-6">
      <h2 id="modal-title" class="text-xl font-semibold">Iniciar Sesión</h2>
      <button
        class="modal__close border border-transparent hover:border-white rounded p-1 transition-colors ease-in-out duration-150"
        aria-label="Close modal"
        id="modal-close"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <>
            <path d="M18 6 6 18"></path>
            <path d="m6 6 12 12"></path>
          </>
        </svg>
      </button>
    </header>

    <!-- Tabs Navigation -->
    <div class="flex mb-6 border-b border-gray-600">
      <button
        id="signin-tab"
        class="flex-1 py-2 px-4 text-center border-b-2 border-transparent hover:border-white transition-colors duration-200 tab-button active"
      >
        Iniciar Sesión
      </button>
      <button
        id="register-tab"
        class="flex-1 py-2 px-4 text-center border-b-2 border-transparent hover:border-white transition-colors duration-200 tab-button"
      >
        Registrarse
      </button>
    </div>

    <main class="modal__content">
      <!-- Sign In Form -->
      <div id="signin-form" class="tab-content active">
        <form
          id="auth-form"
          action="/api/auth/signin"
          method="POST"
          class="mb-6"
        >
          <div class="flex flex-col items-end gap-4">
            <div class="w-full">
              <label for="signin-email" class="block text-sm font-medium mb-2"
                >Email</label
              >
              <input
                type="email"
                id="signin-email"
                name="email"
                required
                class="w-full px-3 py-2 bg-background-default border border-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent rounded"
              />
            </div>
            <div class="w-full">
              <label
                for="signin-password"
                class="block text-sm font-medium mb-2">Password</label
              >
              <input
                type="password"
                id="signin-password"
                name="password"
                required
                class="w-full px-3 py-2 bg-background-default border border-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent rounded"
              />
            </div>
            <Button variant="secondary" type="submit" size="small"
              >Iniciar Sesión</Button
            >
          </div>
        </form>
      </div>

      <!-- Register Form -->
      <div id="register-form" class="tab-content">
        <form
          id="register-auth-form"
          action="/api/auth/register"
          method="POST"
          class="mb-6"
        >
          <div class="flex flex-col items-end gap-4">
            <div class="w-full">
              <label for="register-email" class="block text-sm font-medium mb-2"
                >Email</label
              >
              <input
                type="email"
                id="register-email"
                name="email"
                required
                class="w-full px-3 py-2 bg-background-default border border-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent rounded"
              />
            </div>
            <div class="w-full">
              <label
                for="register-password"
                class="block text-sm font-medium mb-2">Password</label
              >
              <input
                type="password"
                id="register-password"
                name="password"
                required
                minlength="6"
                class="w-full px-3 py-2 bg-background-default border border-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent rounded"
              />
            </div>
            <div class="w-full">
              <label
                for="confirm-password"
                class="block text-sm font-medium mb-2">Confirmar Password</label
              >
              <input
                type="password"
                id="confirm-password"
                name="confirm-password"
                required
                minlength="6"
                class="w-full px-3 py-2 bg-background-default border border-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent rounded"
              />
            </div>
            <Button variant="secondary" type="submit" size="small"
              >Registrarse</Button
            >
          </div>
        </form>
      </div>

      <div class="border-t border-gray-600 pt-6">
        <p class="text-center text-gray-400 mb-4">O</p>
        <form
          action="/api/auth/signin"
          method="post"
          class="flex justify-center"
        >
          <Button
            variant="twitch"
            size="small"
            value="twitch"
            name="provider"
            type="submit"
          >
            <svg
              fill="#ffffff"
              width="24"
              height="24"
              viewBox="0 0 32 32"
              version="1.1"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M26.711 14.929l-4.284 4.284h-4.285l-3.749 3.749v-3.749h-4.82v-16.067h17.138zM8.502 1.004l-5.356 5.356v19.279h6.427v5.356l5.356-5.356h4.284l9.641-9.64v-14.996zM21.356 6.895h2.142v6.427h-2.142zM15.464 6.895h2.143v6.427h-2.144z"
              ></path>
            </svg>
            <span id="twitch-button-text">Inicia sesión con Twitch</span>
          </Button>
        </form>
      </div>
    </main>
  </dialog>
</header>

<style>
  .tab-button.active {
    border-bottom-color: white;
    color: white;
  }

  .tab-content {
    display: none;
  }

  .tab-content.active {
    display: block;
  }

  .tab-button:not(.active) {
    color: #9ca3af;
  }
</style>

<script>
  import { type User } from "../../client/user.client";

  type UserResponse = User | { error: string } | null;

  let currentTab: "signin" | "register" = "signin";

  function handleSearchParams(): void {
    const urlParams = new URLSearchParams(window.location.search);
    const mode = urlParams.get("mode");

    if (mode === "register") {
      switchToTab("register");
    } else {
      switchToTab("signin");
    }
  }

  const signinForm = document.getElementById(
    "signin-form"
  ) as HTMLElement | null;
  const registerForm = document.getElementById(
    "register-form"
  ) as HTMLElement | null;

  function switchToTab(tab: "signin" | "register"): void {
    currentTab = tab;
    const signinTab = document.getElementById(
      "signin-tab"
    ) as HTMLButtonElement | null;
    const registerTab = document.getElementById(
      "register-tab"
    ) as HTMLButtonElement | null;

    const modalTitle = document.getElementById(
      "modal-title"
    ) as HTMLElement | null;

    const twitchButtonText = document.getElementById(
      "twitch-button-text"
    ) as HTMLElement | null;

    if (tab === "signin") {
      signinTab?.classList.add("active");
      registerTab?.classList.remove("active");

      signinForm?.classList.add("active");
      registerForm?.classList.remove("active");

      if (modalTitle) modalTitle.textContent = "Iniciar Sesión";

      if (twitchButtonText)
        twitchButtonText.textContent = "Inicia sesión con Twitch";
    } else {
      signinTab?.classList.remove("active");
      registerTab?.classList.add("active");

      signinForm?.classList.remove("active");
      registerForm?.classList.add("active");

      if (modalTitle) modalTitle.textContent = "Registrarse";

      if (twitchButtonText)
        twitchButtonText.textContent = "Regístrate con Twitch";
    }

    const newUrl = new URL(window.location.href);
    if (tab === "register") {
      newUrl.searchParams.set("mode", "register");
    } else {
      newUrl.searchParams.delete("mode");
    }
    window.history.replaceState({}, "", newUrl.toString());
  }

  function validatePasswords(): boolean {
    const password = (
      document.getElementById("register-password") as HTMLInputElement
    )?.value;
    const confirmPassword = (
      document.getElementById("confirm-password") as HTMLInputElement
    )?.value;

    if (password !== confirmPassword) {
      alert("Las contraseñas no coinciden");
      return false;
    }

    if (password.length < 6) {
      alert("La contraseña debe tener al menos 6 caracteres");
      return false;
    }

    return true;
  }

  // Event listeners para los formularios de autenticación
  const authSigninForm = document.getElementById(
    "auth-form"
  ) as HTMLFormElement | null;
  if (authSigninForm) {
    authSigninForm.addEventListener("submit", async (e: SubmitEvent) => {
      e.preventDefault();

      const formData = new FormData(authSigninForm);

      try {
        const response = await fetch("/api/auth/signin", {
          method: "POST",
          body: formData,
        });

        if (response.ok) {
          // Esperar un momento para que las cookies se establezcan
          setTimeout(() => {
            // Actualizar la UI inmediatamente
            updateUI();
            // Cerrar el modal
            const modalOverlay = document.getElementById(
              "modal-overlay"
            ) as HTMLDialogElement | null;
            if (modalOverlay) {
              modalOverlay.close();
            }
            // Recargar la página para asegurar que todo esté sincronizado
            window.location.reload();
          }, 100);
        } else {
          const errorText = await response.text();
          console.error("Login error:", errorText);
          alert(`Error: ${errorText}`);
        }
      } catch (error) {
        console.error("Error during login:", error);
        alert(
          "Error durante el inicio de sesión. Por favor, intenta de nuevo."
        );
      }
    });
  }

  const authRegisterForm = document.getElementById(
    "register-auth-form"
  ) as HTMLFormElement | null;
  if (authRegisterForm) {
    authRegisterForm.addEventListener("submit", async (e: SubmitEvent) => {
      e.preventDefault();

      if (!validatePasswords()) {
        return;
      }

      const formData = new FormData(authRegisterForm);
      formData.delete("confirm-password");

      try {
        const response = await fetch("/api/auth/register", {
          method: "POST",
          body: formData,
        });

        if (response.ok) {
          alert("Registro exitoso. Por favor, verifica tu email.");
          switchToTab("signin");
        } else {
          const errorText = await response.text();
          console.error("Registration error:", errorText);
          alert(`Error: ${errorText}`);
        }
      } catch (error) {
        console.error("Error during registration:", error);
        alert("Error durante el registro. Por favor, intenta de nuevo.");
      }
    });
  }

  const modalOverlay = document.getElementById(
    "modal-overlay"
  ) as HTMLDialogElement | null;
  const modalClose = document.getElementById(
    "modal-close"
  ) as HTMLButtonElement | null;

  const initialTrigger = document.getElementById(
    "signin-trigger"
  ) as HTMLElement | null;
  if (initialTrigger && modalOverlay) {
    initialTrigger.addEventListener("click", () => {
      handleSearchParams();
      modalOverlay.showModal();
    });
  }

  if (modalClose && modalOverlay) {
    modalClose.addEventListener("click", () => {
      modalOverlay.close();
    });
  }

  if (modalOverlay) {
    modalOverlay.addEventListener("keydown", (e: KeyboardEvent) => {
      if (e.key === "Escape") {
        modalOverlay.close();
      }
    });
  }

  const signinTab = document.getElementById(
    "signin-tab"
  ) as HTMLButtonElement | null;
  const registerTab = document.getElementById(
    "register-tab"
  ) as HTMLButtonElement | null;

  if (signinTab) {
    signinTab.addEventListener("click", () => {
      switchToTab("signin");
    });
  }

  if (registerTab) {
    registerTab.addEventListener("click", () => {
      switchToTab("register");
    });
  }

  // Event listeners para formularios se manejan más abajo
  if (registerForm) {
    registerForm.addEventListener("submit", async (e: SubmitEvent) => {
      e.preventDefault();

      if (!validatePasswords()) {
        return;
      }

      const formData = new FormData(registerForm as HTMLFormElement);
      formData.delete("confirm-password");

      try {
        const response = await fetch("/api/auth/register", {
          method: "POST",
          body: formData,
        });

        if (response.ok) {
          alert("Registro exitoso. Por favor, verifica tu email.");
          switchToTab("signin");
        } else {
          const errorText = await response.text();
          console.error("Registration error:", errorText);
          alert(`Error: ${errorText}`);
        }
      } catch (error) {
        console.error("Error during registration:", error);
        alert("Error durante el registro. Por favor, intenta de nuevo.");
      }
    });
  }

  document.addEventListener("DOMContentLoaded", () => {
    handleSearchParams();
    updateUI();
  });

  window.addEventListener("focus", () => {
    updateUI();
  });

  window.addEventListener("popstate", () => {
    handleSearchParams();
  });
  function getCookie(name: string): string | null {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop()?.split(";").shift() || null;
    return null;
  }

  function getUser(): any {
    try {
      // Primero intentar obtener de localStorage
      const localUser = localStorage.getItem("user-session");
      if (localUser) {
        return JSON.parse(localUser);
      }

      // Si no está en localStorage, intentar obtener de cookies
      const userCookie = getCookie("user-data");
      if (userCookie) {
        const userData = JSON.parse(decodeURIComponent(userCookie));
        // Guardar en localStorage para futuras consultas
        localStorage.setItem("user-session", JSON.stringify(userData));
        return userData;
      }

      return null;
    } catch (error) {
      console.error("Error parsing user data:", error);
      // Limpiar datos corruptos
      localStorage.removeItem("user-session");
      return null;
    }
  }

  function clearUserSession(): void {
    localStorage.removeItem("user-session");
    // También limpiar las cookies del lado del cliente si es necesario
    document.cookie =
      "user-data=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
  }

  async function updateUI(): Promise<void> {
    const user = getUser();
    const signinButton = document.getElementById("signin-button");
    const signinTrigger = document.getElementById("signin-trigger");

    if (user && user.id) {
      if (signinButton) {
        signinButton.innerHTML = `
          <div class="flex items-center gap-2">
            <span class="text-white text-sm">${user.user_metadata?.full_name || user.email}</span>
            <button id="logout-button" class="flex items-center gap-2 text-red-400 hover:text-red-300 text-sm">
              <span class="hidden lg:flex">Cerrar Sesión</span>
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"/><path d="m15 9-6 6"/><path d="m9 9 6 6"/></svg>
            </button>
          </div>
        `;

        const logoutButton = document.getElementById("logout-button");
        if (logoutButton) {
          logoutButton.addEventListener("click", async () => {
            try {
              const response = await fetch("/api/auth/signout", {
                method: "POST",
              });

              clearUserSession();
              window.location.reload();
            } catch (error) {
              console.error("Error during logout:", error);
              // Limpiar sesión local aunque falle el logout del servidor
              clearUserSession();
              window.location.reload();
            }
          });
        }
      }

      if (signinTrigger) {
        signinTrigger.style.display = "none";
      }
    } else {
      if (signinTrigger) {
        signinTrigger.style.display = "block";
      }

      if (signinButton) {
        signinButton.innerHTML = `
          <button class="text-white" id="signin-trigger">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <circle cx="12" cy="12" r="10"></circle>
              <circle cx="12" cy="10" r="3"></circle>
              <path d="M7 20.662V19a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v1.662"></path>
            </svg>
          </button>
        `;

        const newTrigger = document.getElementById("signin-trigger");
        const modalOverlay = document.getElementById(
          "modal-overlay"
        ) as HTMLDialogElement | null;

        if (newTrigger && modalOverlay) {
          newTrigger.addEventListener("click", () => {
            modalOverlay.showModal();
          });
        }
      }
    }
  }

  // Event listeners para formularios ya están definidos arriba

  document.addEventListener("DOMContentLoaded", () => {
    handleSearchParams();
    updateUI();
  });

  window.addEventListener("focus", () => {
    updateUI();
  });

  window.addEventListener("popstate", () => {
    handleSearchParams();
  });
</script>
