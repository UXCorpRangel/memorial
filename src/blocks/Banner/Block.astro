---
import { bannerData } from './data.js';
---

<section class="w-full py-16 lg:py-24 ">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
      <!-- Slider de imÃ¡genes -->
      <div class="relative">
        <div class="slider-container overflow-hidden rounded-xl">
          <div class="slider-track flex transition-transform duration-500 ease-in-out" id="banner-slider">
            {bannerData.images.map((image, index) => (
              <div class="slider-slide flex-none w-full">
                <img
                  src={image.src}
                  alt={image.alt}
                  width="600"
                  height="400"
                  loading="lazy"
                  class="w-full h-96 object-cover"
                />
              </div>
            ))}
          </div>
        </div>

        <!-- Controles del slider -->
        <button
          class="absolute left-4 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white p-2 rounded-full shadow-lg focus:outline-none focus:ring-2 focus:ring-primary-500 transition-colors"
          id="prev-btn"
          aria-label="Imagen anterior"
        >
          <svg class="w-6 h-6 text-neutral-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
        </button>

        <button
          class="absolute right-4 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white p-2 rounded-full shadow-lg focus:outline-none focus:ring-2 focus:ring-primary-500 transition-colors"
          id="next-btn"
          aria-label="Imagen siguiente"
        >
          <svg class="w-6 h-6 text-neutral-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </button>

        <!-- Indicadores -->
        <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2">
          {bannerData.images.map((_, index) => (
            <button
              class={`w-2 h-2 rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-primary-500 indicator ${index === 0 ? 'bg-primary-600' : 'bg-white/60'}`}
              data-slide={index}
              aria-label={`Ir a imagen ${index + 1}`}
            />
          ))}
        </div>
      </div>

      <!-- Contenido de texto -->
      <div class="space-y-6">
        <div class="space-y-4">
          <h2 class="text-3xl lg:text-4xl font-bold text-neutral-900">
            {bannerData.title}
          </h2>
          <p class="text-lg text-neutral-600 leading-relaxed">
            {bannerData.description}
          </p>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  class BannerSlider {
    private currentSlide = 0;
    private slides: HTMLElement[];
    private indicators: HTMLElement[];
    private track: HTMLElement;
    private autoplayInterval: number | null = null;

    constructor() {
      this.track = document.getElementById('banner-slider') as HTMLElement;
      this.slides = Array.from(this.track.children) as HTMLElement[];
      this.indicators = Array.from(document.querySelectorAll('.indicator')) as HTMLElement[];

      this.init();
    }

    init() {
      // Event listeners for navigation buttons
      document.getElementById('prev-btn')?.addEventListener('click', () => this.prevSlide());
      document.getElementById('next-btn')?.addEventListener('click', () => this.nextSlide());

      // Event listeners for indicators
      this.indicators.forEach((indicator, index) => {
        indicator.addEventListener('click', () => this.goToSlide(index));
      });

      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') this.prevSlide();
        if (e.key === 'ArrowRight') this.nextSlide();
      });

      // Auto-play
      this.startAutoplay();

      // Pause on hover
      this.track.addEventListener('mouseenter', () => this.pauseAutoplay());
      this.track.addEventListener('mouseleave', () => this.startAutoplay());
    }

    goToSlide(index: number) {
      this.currentSlide = index;
      this.updateSlider();
    }

    nextSlide() {
      this.currentSlide = (this.currentSlide + 1) % this.slides.length;
      this.updateSlider();
    }

    prevSlide() {
      this.currentSlide = this.currentSlide === 0 ? this.slides.length - 1 : this.currentSlide - 1;
      this.updateSlider();
    }

    updateSlider() {
      const translateX = -this.currentSlide * 100;
      this.track.style.transform = `translateX(${translateX}%)`;

      // Update indicators
      this.indicators.forEach((indicator, index) => {
        if (index === this.currentSlide) {
          indicator.classList.remove('bg-white/60');
          indicator.classList.add('bg-primary-600');
        } else {
          indicator.classList.remove('bg-primary-600');
          indicator.classList.add('bg-white/60');
        }
      });
    }

    startAutoplay() {
      this.autoplayInterval = window.setInterval(() => {
        this.nextSlide();
      }, 4000);
    }

    pauseAutoplay() {
      if (this.autoplayInterval) {
        clearInterval(this.autoplayInterval);
        this.autoplayInterval = null;
      }
    }
  }

  // Initialize slider when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new BannerSlider();
  });
</script>
