---
import Button from '@/components/Button.astro';
import type { Project } from './types.js';
import './styles.css';

export interface Props {
  works: {
    projects: Project[];
    cards: string[];
  };
}

const { works } = Astro.props;
---

<div class="h-fit flex flex-col lg:flex-row gap-32">
  <!-- Tabs verticales -->
  <div 
    class="flex flex-col space-y-6"
    role="tablist"
    aria-label="Lista de proyectos"
  >
    {works.projects.map((project, index) => (
      <button
        class={`w-[285px] tab-button text-center p-4 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-[#972123] ${
          index === 0 
            ? 'border-[2.43px] border-solid [border-image:linear-gradient(90deg,#F3384A_0%,#972123_100%)_1] bg-[radial-gradient(135.68%_278.42%_at_8.47%_26.88%,#432733_0%,#22202E_100%)]' 
            : 'border-[0.81px] border-solid border-[#383848] bg-[radial-gradient(135.68%_278.42%_at_8.47%_26.88%,rgba(67,39,51,0.5)_0%,rgba(34,32,46,0.5)_100%)]'
        }`}
        role="tab"
        aria-selected={index === 0 ? "true" : "false"}
        aria-controls={`panel-${index}`}
        id={`tab-${index}`}
        data-tab-index={index}
      >
        <p class="text-[16px] text-white font-bold opacity-80">{project.title}</p>
      </button>
    ))}
  </div>
  
  <!-- Panel de contenido -->
  <div class="relative min-h-96 w-full flex-1">
    <div
      aria-hidden="true"
      class="pointer-events-none absolute bottom-[-20vh] left-1/2 -translate-x-1/2
            h-[75vh] w-[50vw] -z-10">
      <div
        class="absolute bottom-0 left-1/2 -translate-x-1/2
              h-[75vh] w-[50vw]
              bg-[radial-gradient(50%_50%_at_50%_50%,#383848_0%,#07091E_100%)]">
      </div>
    </div>
    {works.projects.map((project, index) => (
      <div
        class={`flex flex-col justify-center items-center tab-panel absolute inset-0 transition-all duration-400 ${
          index === 0 ? 'opacity-100 animate-fade-in-up' : 'opacity-0 pointer-events-none'
        }`}
        role="tabpanel"
        aria-labelledby={`tab-${index}`}
        id={`panel-${index}`}
        tabindex="0"
      >
        <section class="deck-wrapper">
          <div id="fan-deck" class="card-fan">
            {works.cards.map((card, index) => (
              <article class="card">
                <img src={card} alt={`Carta ${index + 1}`} class="card-face" />
              </article>
            ))}
          </div>
        </section>
        <Button variant='secondary'>
          Ver proyecto
        </Button>
      </div>
    ))}
  </div>
</div>

<script>
  class TabController {
    private tabs: HTMLElement[];
    private panels: HTMLElement[];
    private currentTab = 0;

    constructor() {
      this.tabs = Array.from(document.querySelectorAll('.tab-button')) as HTMLElement[];
      this.panels = Array.from(document.querySelectorAll('.tab-panel')) as HTMLElement[];
      
      this.init();
    }

    init() {
      // Click handlers
      this.tabs.forEach((tab, index) => {
        tab.addEventListener('click', () => this.showTab(index));
      });

      // Keyboard navigation
      this.tabs.forEach((tab, index) => {
        tab.addEventListener('keydown', (e) => this.handleKeydown(e, index));
      });
    }

    showTab(index: number) {
      // Hide current panel with fade out
      const currentPanel = this.panels[this.currentTab];
      currentPanel.classList.remove('animate-fade-in-up');
      currentPanel.classList.add('animate-fade-out-down');
      
      setTimeout(() => {
        currentPanel.classList.add('opacity-0', 'pointer-events-none');
        currentPanel.classList.remove('animate-fade-out-down');

        // Update tab states
        this.tabs[this.currentTab].setAttribute('aria-selected', 'false');
        this.tabs[this.currentTab].classList.remove('border-[2.43px]', 'border-solid', '[border-image:linear-gradient(90deg,#F3384A_0%,#972123_100%)_1]', 'bg-[radial-gradient(135.68%_278.42%_at_8.47%_26.88%,#432733_0%,#22202E_100%)]');
        this.tabs[this.currentTab].classList.add('border-[0.81px]', 'border-solid', 'border-[#383848]', 'bg-[radial-gradient(135.68%_278.42%_at_8.47%_26.88%,rgba(67,39,51,0.5)_0%,rgba(34,32,46,0.5)_100%)]');

        // Show new panel with fade in
        this.currentTab = index;
        const newPanel = this.panels[this.currentTab];
        newPanel.classList.remove('opacity-0', 'pointer-events-none');
        newPanel.classList.add('animate-fade-in-up');

        // Update new tab state
        this.tabs[this.currentTab].setAttribute('aria-selected', 'true');
        this.tabs[this.currentTab].classList.remove('border-[0.81px]', 'border-solid', 'border-[#383848]', 'bg-[radial-gradient(135.68%_278.42%_at_8.47%_26.88%,rgba(67,39,51,0.5)_0%,rgba(34,32,46,0.5)_100%)]');
        this.tabs[this.currentTab].classList.add('border-[2.43px]', 'border-solid', '[border-image:linear-gradient(90deg,#F3384A_0%,#972123_100%)_1]', 'bg-[radial-gradient(135.68%_278.42%_at_8.47%_26.88%,#432733_0%,#22202E_100%)]');
      }, 150);
    }

    handleKeydown(e: KeyboardEvent, index: number) {
      let nextIndex = index;

      switch (e.key) {
        case 'ArrowDown':
          e.preventDefault();
          nextIndex = (index + 1) % this.tabs.length;
          break;
        case 'ArrowUp':
          e.preventDefault();
          nextIndex = index === 0 ? this.tabs.length - 1 : index - 1;
          break;
        case 'Home':
          e.preventDefault();
          nextIndex = 0;
          break;
        case 'End':
          e.preventDefault();
          nextIndex = this.tabs.length - 1;
          break;
        case 'Enter':
        case ' ':
          e.preventDefault();
          this.showTab(index);
          return;
        default:
          return;
      }

      this.tabs[nextIndex].focus();
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    new TabController();
  });
</script>

<script>
  const el = document.getElementById('fan-deck');
  if (el) {
    const io = new IntersectionObserver((entries) => {
      entries.forEach((e) => {
        if (e.isIntersecting) {
          el.classList.add('is-visible');
        } else {
          el.classList.remove('is-visible');
        }
      });
    }, { threshold: 0.4 });
    io.observe(el);
  }
</script>
