---
import Button from '@/components/Button.astro';
import type { Project } from './types.js';

export interface Props {
  works: Project[];
}

const { works } = Astro.props;
---

<div class="h-fit grid grid-cols-1 lg:grid-cols-2 gap-12 items-start">
  <!-- Tabs verticales -->
  <div 
    class="flex flex-col space-y-2"
    role="tablist"
    aria-label="Lista de proyectos"
  >
    {works.map((project, index) => (
      <button
        class={`tab-button text-center p-6 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-primary-500 ${
          index === 0 
            ? 'border-[2.43px] border-solid [border-image:linear-gradient(90deg,#F3384A_0%,#972123_100%)_1] bg-[radial-gradient(135.68%_278.42%_at_8.47%_26.88%,#432733_0%,#22202E_100%)]' 
            : 'border-[0.81px] border-solid border-[#383848] bg-[radial-gradient(135.68%_278.42%_at_8.47%_26.88%,rgba(67,39,51,0.5)_0%,rgba(34,32,46,0.5)_100%)]'
        }`}
        role="tab"
        aria-selected={index === 0 ? "true" : "false"}
        aria-controls={`panel-${index}`}
        id={`tab-${index}`}
        data-tab-index={index}
      >
        <p class="text-[16px] text-white font-bold opacity-80">{project.category}</p>
      </button>
    ))}
  </div>
  
  <!-- Panel de contenido -->
  <div class="relative min-h-96">
    {works.map((project, index) => (
      <div
        class={`tab-panel absolute inset-0 transition-all duration-400 ${
          index === 0 ? 'opacity-100 animate-fade-in-up' : 'opacity-0 pointer-events-none'
        }`}
        role="tabpanel"
        aria-labelledby={`tab-${index}`}
        id={`panel-${index}`}
        tabindex="0"
      >
        <div class="w-[400px] h-[400px] bg-red-500" />
        <Button variant='secondary'>
          Ver proyecto
        </Button>
      </div>
    ))}
  </div>
</div>

<script>
  class TabController {
    private tabs: HTMLElement[];
    private panels: HTMLElement[];
    private currentTab = 0;

    constructor() {
      this.tabs = Array.from(document.querySelectorAll('.tab-button')) as HTMLElement[];
      this.panels = Array.from(document.querySelectorAll('.tab-panel')) as HTMLElement[];
      
      this.init();
    }

    init() {
      // Click handlers
      this.tabs.forEach((tab, index) => {
        tab.addEventListener('click', () => this.showTab(index));
      });

      // Keyboard navigation
      this.tabs.forEach((tab, index) => {
        tab.addEventListener('keydown', (e) => this.handleKeydown(e, index));
      });
    }

    showTab(index: number) {
      // Hide current panel with fade out
      const currentPanel = this.panels[this.currentTab];
      currentPanel.classList.remove('animate-fade-in-up');
      currentPanel.classList.add('animate-fade-out-down');
      
      setTimeout(() => {
        currentPanel.classList.add('opacity-0', 'pointer-events-none');
        currentPanel.classList.remove('animate-fade-out-down');

        // Update tab states
        this.tabs[this.currentTab].setAttribute('aria-selected', 'false');
        this.tabs[this.currentTab].classList.remove('bg-primary-100', 'text-primary-900', 'border-primary-600');
        this.tabs[this.currentTab].classList.add('bg-white', 'text-neutral-700', 'border-transparent');

        // Show new panel with fade in
        this.currentTab = index;
        const newPanel = this.panels[this.currentTab];
        newPanel.classList.remove('opacity-0', 'pointer-events-none');
        newPanel.classList.add('animate-fade-in-up');

        // Update new tab state
        this.tabs[this.currentTab].setAttribute('aria-selected', 'true');
        this.tabs[this.currentTab].classList.remove('bg-white', 'text-neutral-700', 'border-transparent');
        this.tabs[this.currentTab].classList.add('bg-primary-100', 'text-primary-900', 'border-primary-600');
      }, 150);
    }

    handleKeydown(e: KeyboardEvent, index: number) {
      let nextIndex = index;

      switch (e.key) {
        case 'ArrowDown':
          e.preventDefault();
          nextIndex = (index + 1) % this.tabs.length;
          break;
        case 'ArrowUp':
          e.preventDefault();
          nextIndex = index === 0 ? this.tabs.length - 1 : index - 1;
          break;
        case 'Home':
          e.preventDefault();
          nextIndex = 0;
          break;
        case 'End':
          e.preventDefault();
          nextIndex = this.tabs.length - 1;
          break;
        case 'Enter':
        case ' ':
          e.preventDefault();
          this.showTab(index);
          return;
        default:
          return;
      }

      this.tabs[nextIndex].focus();
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new TabController();
  });
</script>
