---
import Button from "@/components/Button.astro";
import type { Project } from "./types.js";
import "./styles.css";
import type { WorksData } from "./data";

export interface Props {
  works: WorksData;
}

const { works } = Astro.props;
---

<section class="h-fit flex flex-col lg:flex-row gap-12 lg:gap-32">
  <!-- Tabs verticales -->
  <section
    class="flex flex-row gap-6 lg:justify-center sm:justify-start overflow-x-auto lg:overflow-x-visible lg:flex-col scrollbar-hide"
    role="tablist"
    aria-label="Lista de proyectos"
  >
    {
      works.projects.map((project, index) => (
        <button
          class={`flex-none min-w-[285px] max-w-[285px] tab-button-works text-center p-4 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-[#972123] ${
            index === 0
              ? "border-[2.43px] border-solid [border-image:linear-gradient(90deg,#F3384A_0%,#972123_100%)_1] bg-[radial-gradient(135.68%_278.42%_at_8.47%_26.88%,#432733_0%,#22202E_100%)]"
              : "border-[0.81px] border-solid border-[#383848] bg-[radial-gradient(135.68%_278.42%_at_8.47%_26.88%,rgba(67,39,51,0.5)_0%,rgba(34,32,46,0.5)_100%)]"
          }`}
          role="tab"
          aria-selected={index === 0 ? "true" : "false"}
          aria-controls={`panel-${index}`}
          id={`tab-${index}`}
          data-tab-index={index}
          data-project-url={project.url}
        >
          <p class="text-[16px] text-white font-bold opacity-80">
            {project.title}
          </p>
        </button>
      ))
    }
  </section>

  <!-- Panel de contenido -->
  <section class="relative min-h-96 w-full flex-1 deck-wrapper">
    <div
      aria-hidden="true"
      class="pointer-events-none absolute bottom-[-20vh] left-1/2 -translate-x-1/2
            h-[75vh] w-[50vw] -z-10"
    >
      <div
        class="absolute bottom-0 left-1/2 -translate-x-1/2
              h-[75vh] w-[50vw]
              bg-[radial-gradient(50%_50%_at_50%_50%,#383848_0%,#07091E_100%)]"
      >
      </div>
    </div>

    {
      works.projects.map((project, index) => (
        <div
          class={`lg:h-[60dvh] flex flex-col gap-8 justify-center items-center tab-panel w-full  transition-all duration-400 ${
            index === 0
              ? "opacity-100 visible animate-fade-in-up z-10"
              : "opacity-0 invisible absolute top-0 left-0 z-0"
          }`}
          role="tabpanel"
          tabindex="0"
          aria-labelledby={`tab-${index}`}
          id={`panel-${index}`}
          data-project-type={project.type}
          data-project-url={project.url}
        >
          {project.type === "cards" && project.images && (
            <div
              id={index === 0 ? "fan-deck" : `fan-deck-${index}`}
              class="card-fan"
            >
              {project.images.map((image, cardIndex) => (
                <article class="card">
                  <img
                    src={image}
                    alt={`Carta ${cardIndex + 1} - ${project.title}`}
                    class="card-face"
                  />
                </article>
              ))}
            </div>
          )}

          {project.type === "preview" && project.url && (
            <section class="codepen-wrapper w-full max-w-4xl">
              <div class="codepen-embed-container">
                <iframe
                  height="600"
                  style="width: 100%;"
                  scrolling="no"
                  title={project.title}
                  src={
                    project.url.replace("/pen/", "/embed/") +
                    `?default-tab=result&theme-id=dark&zoom=${project.zoom}`
                  }
                  frameborder="no"
                  loading="lazy"
                  allowtransparency="true"
                  allowfullscreen="true"
                >
                  Ver el Pen {project.title} por jagcruz en CodePen.
                </iframe>
              </div>
            </section>
          )}

          <Button variant="secondary">
            {project.type === "cards" ? "Ver proyecto" : "Ver en CodePen"}
          </Button>
        </div>
      ))
    }
  </section>
</section>

<script async src="https://public.codepenassets.com/embed/index.js"></script>

<script>
  import type { Project } from "./types.js";

  class TabController {
    private tabs: HTMLElement[];
    private panels: HTMLElement[];
    private currentTab: number = 0;
    private projects: Pick<Project, "type" | "url">[];

    constructor() {
      this.tabs = Array.from(
        document.querySelectorAll(".tab-button-works")
      ) as HTMLElement[];
      this.panels = Array.from(
        document.querySelectorAll(".tab-panel")
      ) as HTMLElement[];
      this.projects = this.getProjectsFromDOM();

      this.init();
      this.setupIntersectionObservers();
      this.setupButtons(); // <-- aquí
    }
    private setupButtons(): void {
      this.panels.forEach((panel, index) => {
        const button = panel.querySelector("button") as HTMLButtonElement;
        if (button) {
          button.addEventListener("click", () => {
            const project = this.projects[index];
            if (!project) return;

            // Abrir URL dependiendo del tipo de proyecto
            const url = project.url;
            if (url) window.open(url, "_blank");
          });
        }
      });
    }
    private getProjectsFromDOM(): Pick<Project, "type" | "url">[] {
      return this.panels.map((panel) => ({
        type: (panel.dataset.projectType as Project["type"]) || "",
        url: panel.dataset.projectUrl || "", // <-- leer la URL
      }));
    }

    private init(): void {
      // Click handlers
      this.tabs.forEach((tab, index) => {
        tab.addEventListener("click", () => this.showTab(index));
      });

      // Keyboard navigation
      this.tabs.forEach((tab, index) => {
        tab.addEventListener("keydown", (e) => this.handleKeydown(e, index));
      });
    }

    private setupIntersectionObservers(): void {
      // Configurar intersection observers para todas las fan-deck
      this.panels.forEach((panel, index) => {
        const projectType = panel.dataset.projectType;
        if (projectType === "cards") {
          const fanDeck = panel.querySelector(
            `#${index === 0 ? "fan-deck" : `fan-deck-${index}`}`
          );
          if (fanDeck) {
            const io = new IntersectionObserver(
              (entries) => {
                entries.forEach((e) => {
                  if (e.isIntersecting) {
                    fanDeck.classList.add("is-visible");
                  } else {
                    fanDeck.classList.remove("is-visible");
                  }
                });
              },
              { threshold: 0.4 }
            );
            io.observe(fanDeck);
          }
        }
      });
    }

    private showTab(index: number): void {
      if (index === this.currentTab) return;

      // Hide current panel
      const currentPanel = this.panels[this.currentTab];
      currentPanel.classList.remove(
        "opacity-100",
        "visible",
        "animate-fade-in-up",
        "z-10"
      );
      currentPanel.classList.add(
        "opacity-0",
        "invisible",
        "absolute",
        "top-0",
        "left-0",
        "z-0"
      );

      // Update tab states
      this.updateTabState(this.currentTab, false);

      // Show new panel
      this.currentTab = index;
      const newPanel = this.panels[this.currentTab];

      // Small delay to ensure smooth transition
      setTimeout(() => {
        newPanel.classList.remove(
          "opacity-0",
          "invisible",
          "absolute",
          "top-0",
          "left-0",
          "z-0"
        );
        newPanel.classList.add(
          "opacity-100",
          "visible",
          "animate-fade-in-up",
          "z-10"
        );

        // Update new tab state
        this.updateTabState(this.currentTab, true);

        // Trigger animation for cards if needed
        const projectType = this.projects[this.currentTab]?.type;
        if (projectType === "cards") {
          this.triggerCardAnimation(index);
        }
      }, 50);
    }

    private updateTabState(index: number, isActive: boolean): void {
      const tab = this.tabs[index];
      tab.setAttribute("aria-selected", isActive.toString());

      if (isActive) {
        tab.classList.remove(
          "border-[0.81px]",
          "border-solid",
          "border-[#383848]",
          "bg-[radial-gradient(135.68%_278.42%_at_8.47%_26.88%,rgba(67,39,51,0.5)_0%,rgba(34,32,46,0.5)_100%)]"
        );
        tab.classList.add(
          "border-[2.43px]",
          "border-solid",
          "[border-image:linear-gradient(90deg,#F3384A_0%,#972123_100%)_1]",
          "bg-[radial-gradient(135.68%_278.42%_at_8.47%_26.88%,#432733_0%,#22202E_100%)]"
        );
      } else {
        tab.classList.remove(
          "border-[2.43px]",
          "border-solid",
          "[border-image:linear-gradient(90deg,#F3384A_0%,#972123_100%)_1]",
          "bg-[radial-gradient(135.68%_278.42%_at_8.47%_26.88%,#432733_0%,#22202E_100%)]"
        );
        tab.classList.add(
          "border-[0.81px]",
          "border-solid",
          "border-[#383848]",
          "bg-[radial-gradient(135.68%_278.42%_at_8.47%_26.88%,rgba(67,39,51,0.5)_0%,rgba(34,32,46,0.5)_100%)]"
        );
      }
    }

    private triggerCardAnimation(index: number): void {
      const fanDeck = document.querySelector(
        `#${index === 0 ? "fan-deck" : `fan-deck-${index}`}`
      );
      if (fanDeck) {
        // Reiniciar la animación
        fanDeck.classList.remove("is-visible");
        setTimeout(() => {
          fanDeck.classList.add("is-visible");
        }, 100);
      }
    }

    private handleKeydown(e: KeyboardEvent, index: number): void {
      let nextIndex = index;

      switch (e.key) {
        case "ArrowDown":
          e.preventDefault();
          nextIndex = (index + 1) % this.tabs.length;
          break;
        case "ArrowUp":
          e.preventDefault();
          nextIndex = index === 0 ? this.tabs.length - 1 : index - 1;
          break;
        case "Home":
          e.preventDefault();
          nextIndex = 0;
          break;
        case "End":
          e.preventDefault();
          nextIndex = this.tabs.length - 1;
          break;
        case "Enter":
        case " ":
          e.preventDefault();
          this.showTab(index);
          return;
        default:
          return;
      }

      this.tabs[nextIndex].focus();
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    new TabController();
  });
</script>
