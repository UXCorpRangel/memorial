---
interface Props {
  class?: string;
}

const { class: className = "" } = Astro.props;
---

<div class={`glow-card ${className}`} data-glow>
  <div data-glow></div>
  <slot />
</div>

<style>
  .glow-card {
    --base: 0;
    --spread: 20;
    --radius: 0;
    --border: 2;
    --backdrop: hsl(0 0% 60% / 0.12);
    --backup-border: var(--backdrop);
    --size: 300;
    --outer: 1;
    --border-size: calc(var(--border, 2) * 1px);
    --spotlight-size: calc(var(--size, 150) * 1px);
    --hue: calc(var(--base) + (var(--xp, 0) * var(--spread, 0)));

    background-image: radial-gradient(
      135.68% 278.42% at 8.47% 26.88%,
      rgba(67, 39, 51, 0.5) 0%,
      rgba(34, 32, 46, 0.5) 100%
    );
    background-size: calc(100% + (2 * var(--border-size)))
      calc(100% + (2 * var(--border-size)));
    background-position: 50% 50%;
    background-attachment: fixed;
    border: var(--border-size) solid var(--backup-border);
    position: relative;
    touch-action: none;
    border-radius: calc(var(--radius) * 1px);
  }

  [data-glow]::before,
  [data-glow]::after {
    pointer-events: none;
    content: "";
    position: absolute;
    inset: calc(var(--border-size) * -1);
    border: var(--border-size) solid transparent;
    border-radius: calc(var(--radius) * 1px);
    background-attachment: fixed;
    background-size: calc(100% + (2 * var(--border-size)))
      calc(100% + (2 * var(--border-size)));
    background-repeat: no-repeat;
    background-position: 50% 50%;
    mask: linear-gradient(transparent, transparent),
      linear-gradient(white, white);
    mask-clip: padding-box, border-box;
    mask-composite: intersect;
  }

  [data-glow]::before {
    background-image: radial-gradient(
      calc(var(--spotlight-size) * 0.75) calc(var(--spotlight-size) * 0.75) at
        calc(var(--x, 0) * 1px) calc(var(--y, 0) * 1px),
      #f3384a,
      transparent 100%
    );
    filter: brightness(1.5);
  }

  [data-glow]::after {
    background-image: radial-gradient(
      calc(var(--spotlight-size) * 0.5) calc(var(--spotlight-size) * 0.5) at
        calc(var(--x, 0) * 1px) calc(var(--y, 0) * 1px),
      #f3384a,
      transparent 100%
    );
    opacity: 0.8;
  }

  [data-glow] [data-glow] {
    position: absolute;
    inset: 0;
    will-change: filter;
    opacity: var(--outer, 1);
    border-radius: calc(var(--radius) * 1px);
    border-width: calc(var(--border-size) * 20);
    filter: blur(calc(var(--border-size) * 10));
    background: none;
    pointer-events: none;
    border: none;
  }

  [data-glow] > [data-glow]::before {
    inset: -10px;
    border-width: 10px;
  }
</style>

<script>
  function initGlowCard() {
    const syncPointer = (e: PointerEvent) => {
      const { clientX: x, clientY: y } = e;

      document.querySelectorAll("[data-glow]").forEach((card) => {
        const element = card as HTMLElement;
        element.style.setProperty("--x", x.toFixed(2));
        element.style.setProperty("--xp", (x / window.innerWidth).toFixed(2));
        element.style.setProperty("--y", y.toFixed(2));
        element.style.setProperty("--yp", (y / window.innerHeight).toFixed(2));
      });
    };

    document.addEventListener("pointermove", syncPointer);
  }

  initGlowCard();
</script>
